using System;
using Microsoft.Azure.Functions.Worker.Sdk.Generators.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

namespace Microsoft.Azure.Functions.Worker.Sdk.Generators
{
    public sealed record AnalyzerConfigurationProvider
    {
        public AnalyzerConfigurationProvider(
            bool isRunningInAzureFunctionProject,
            bool shouldExecuteGeneration,
            bool shouldIncludeAutoGeneratedAttributes,
            string namespaceOfGeneratedCode,
            string assemblyName)
        {
            IsRunningInAzureFunctionProject = isRunningInAzureFunctionProject;
            ShouldExecuteGeneration = shouldExecuteGeneration;
            ShouldIncludeAutoGeneratedAttributes = shouldIncludeAutoGeneratedAttributes;
            NamespaceOfGeneratedCode = namespaceOfGeneratedCode;
            AssemblyName = assemblyName;
            AssemblyFileName = $"{assemblyName}.dll";
        }

        public static IncrementalValueProvider<AnalyzerConfigurationProvider> Load(
            IncrementalGeneratorInitializationContext context)
        {
            var analyzerOptions = context.AnalyzerConfigOptionsProvider
                .Select((x, ct) => new
                {
                    IsRunningInAzureFunctionProject = x.IsRunningInAzureFunctionProject(),
                    ShouldIncludeAutoGeneratedAttributes = x.ShouldIncludeAutoGeneratedAttributes(),
                    ShouldExecuteGeneration = x.ShouldExecuteGeneration(),
                    Namespace = GetNamespace(x)
                });

            var compilationInfo = context.CompilationProvider
                .Select((x, ct) => new { x.AssemblyName });

            return analyzerOptions
                .Combine(compilationInfo)
                .Select((g, ct) => new AnalyzerConfigurationProvider(
                    g.Left.IsRunningInAzureFunctionProject,
                    g.Left.ShouldExecuteGeneration,
                    g.Left.ShouldIncludeAutoGeneratedAttributes,
                    g.Left.Namespace,
                    g.Right?.AssemblyName ?? throw new ArgumentNullException(nameof(g.Right.AssemblyName))));
        }

        private static string GetNamespace(AnalyzerConfigOptionsProvider analyzer)
        {
            analyzer.GlobalOptions.TryGetValue(
                Constants.BuildProperties.GeneratedCodeNamespace,
                out var namespaceValue);

            return string.IsNullOrWhiteSpace(namespaceValue)
                ? "SourceGenerated"
                : namespaceValue!;
        }

        public bool IsRunningInAzureFunctionProject { get; private set; }
        public bool ShouldExecuteGeneration { get; }
        public bool ShouldIncludeAutoGeneratedAttributes { get; }
        public string NamespaceOfGeneratedCode { get; }
        public string AssemblyName { get; }
        public string AssemblyFileName { get; }
    }
}
